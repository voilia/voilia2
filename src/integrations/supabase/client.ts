
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://uqnatcywnnttjxweomud.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVxbmF0Y3l3bm50dGp4d2VvbXVkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQyNDk1OTMsImV4cCI6MjA1OTgyNTU5M30.uzj9UgcQLjpbAOXMDF_zN-3sC7ELe3LsArQTMmb8oG4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  db: {
    schema: 'public',
  },
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    // Add custom headers for RPC calls that are not formally defined in the types file
    headers: { 
      'x-custom-header': 'custom-value'
    },
  },
});

// Add runtime extension to support extra RPCs not in the types
export type CustomRPC = 'create_project_with_owner';
const rpcProxy = new Proxy(supabase.rpc, {
  apply: (target, thisArg, args) => {
    // Allow all RPCs to be called
    return Reflect.apply(target, thisArg, args);
  }
});

// Replace the original rpc method with our proxied version
// @ts-ignore - we're intentionally extending the functionality
supabase.rpc = rpcProxy;
